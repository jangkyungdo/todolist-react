{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","components/TodoStatus.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","onToggle","id","todos","useState","name","todo","form","setForm","currentUser","localStorage","getItem","onChange","useCallback","e","target","value","onSubmit","preventDefault","onSubmitName","setItem","type","placeholder","TodoListItem","onRemove","text","onClick","TodoList","allRemove","selectRemove","width","map","key","TodoStatus","complete","filter","checked","inComplete","length","App","setTodos","nextId","useRef","nextTodos","current","console","log","concat","saveLocalStorage","JSON","stringify","useEffect","readLocalStorage","prasedTodos","parse","removeItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.86fda56e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoTemplate.scss';\r\n\r\nconst TodoTemplate = ({ children }) => {\r\n  return (\r\n    <div className=\"TodoTemplate\">\r\n      <h1 className=\"title\">To DO List</h1>\r\n      <div className=\"content\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoTemplate;\r\n","import React, { useState, useCallback } from 'react';\r\nimport './TodoInsert.scss';\r\n\r\nconst TodoInsert = ({ onInsert, onToggle, todos }) => {\r\n  const { id } = todos;\r\n  const [form, setForm] = useState({ name: '', todo: '' });\r\n  const USER_LOCALSTORAGE = 'userName';\r\n  const currentUser = localStorage.getItem(USER_LOCALSTORAGE);\r\n\r\n  const onChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n      setForm({\r\n        ...form,\r\n        [name]: [value],\r\n      });\r\n    },\r\n    [form]\r\n  );\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      onInsert(form.todo);\r\n      // setValue('');\r\n      setForm({\r\n        ...form,\r\n        todo: '',\r\n      });\r\n      e.preventDefault();\r\n    },\r\n    [form]\r\n  );\r\n\r\n  const onSubmitName = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      localStorage.setItem(USER_LOCALSTORAGE, form.name);\r\n      // setName('');\r\n      setForm({\r\n        ...form,\r\n        name: '',\r\n      });\r\n      onToggle(id);\r\n    },\r\n    [form]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <form className=\"TodoInsert\" onSubmit={onSubmitName}>\r\n        <input\r\n          className=\"TodoInsert__name\"\r\n          name=\"name\"\r\n          type=\"text\"\r\n          value={form.name}\r\n          onChange={onChange}\r\n          placeholder=\"이름을 입력해주세요.\"\r\n        ></input>\r\n        <h2>{currentUser}</h2>\r\n        <button type=\"submit\">변경</button>\r\n      </form>\r\n      <form className=\"TodoInsert\" onSubmit={onSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"todo\"\r\n          value={form.todo}\r\n          onChange={onChange}\r\n          placeholder=\"할 일을 입력해주세요.\"\r\n        ></input>\r\n        <button type=\"submit\">추가</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoInsert;\r\n","import React from 'react';\r\nimport { MdRemoveCircleOutline } from 'react-icons/md';\r\nimport './TodoListItem.scss';\r\n\r\nconst TodoListItem = ({ todo, onRemove, onToggle }) => {\r\n  const { id, text } = todo;\r\n\r\n  return (\r\n    <tr className=\"TodoListItem\">\r\n      <td>\r\n        <input type=\"checkbox\" onClick={() => onToggle(id)}></input>\r\n      </td>\r\n      <td className=\"text\">{text}</td>\r\n      <td className=\"delete\" onClick={() => onRemove(id)}>\r\n        <MdRemoveCircleOutline />\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default TodoListItem;\r\n","import React from 'react';\r\nimport './TodoList.scss';\r\nimport TodoListItem from './TodoListItem';\r\n\r\nconst TodoList = ({ todos, onRemove, allRemove, selectRemove, onToggle }) => {\r\n  return (\r\n    <>\r\n      <table className=\"TodoList\">\r\n        <colgroup>\r\n          <col width=\"10%\" />\r\n          <col width=\"80%\" />\r\n          <col width=\"10%\" />\r\n        </colgroup>\r\n        <thead>\r\n          <tr>\r\n            <th>Check</th>\r\n            <th>Todo List</th>\r\n            <th>Delete</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {todos.map((todo) => (\r\n            <TodoListItem\r\n              todo={todo}\r\n              key={todo.id}\r\n              onRemove={onRemove}\r\n              onToggle={onToggle}\r\n            />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"button-box\">\r\n        <button onClick={selectRemove}>선택 삭제</button>\r\n        <button onClick={allRemove}>전체 삭제</button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './TodoStatus.scss';\r\n\r\nconst TodoStatus = ({ todos }) => {\r\n  const complete = todos.filter((todo) => !todo.checked);\r\n  const inComplete = todos.filter((todo) => todo.checked);\r\n  return (\r\n    <div className=\"TodoStatus\">\r\n      <div>총 : {todos.length}건</div>\r\n      <div>완료 : {complete.length}건</div>\r\n      <div>미완료 : {inComplete.length}건</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoStatus;\r\n","import React, { useState, useCallback, useRef, useEffect } from 'react';\r\nimport './App.css';\r\nimport TodoTemplate from './components/TodoTemplate';\r\nimport TodoInsert from './components/TodoInsert';\r\nimport TodoList from './components/TodoList';\r\nimport TodoStatus from './components/TodoStatus';\r\n\r\nconst App = () => {\r\n  const [todos, setTodos] = useState([]);\r\n  const USER_LOCALSTORAGE = 'todos';\r\n\r\n  // const nextId = todos.length + 1;\r\n  const nextId = useRef(1);\r\n\r\n  const onInsert = useCallback(\r\n    (text) => {\r\n      const nextTodos = {\r\n        // id: nextId,\r\n        id: nextId.current,\r\n        text,\r\n        checked: true,\r\n      };\r\n      console.log(todos);\r\n      setTodos(todos.concat(nextTodos));\r\n      console.log(todos);\r\n      saveLocalStorage();\r\n      nextId.current += 1;\r\n      console.log(todos.length);\r\n    },\r\n    [todos]\r\n  );\r\n\r\n  const saveLocalStorage = () => {\r\n    localStorage.setItem(USER_LOCALSTORAGE, JSON.stringify(todos));\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('마운트');\r\n    const readLocalStorage = localStorage.getItem(USER_LOCALSTORAGE);\r\n    if (readLocalStorage == null) {\r\n      return;\r\n    }\r\n    const prasedTodos = JSON.parse(readLocalStorage);\r\n    console.log(prasedTodos);\r\n    setTodos(prasedTodos);\r\n  }, []);\r\n\r\n  const onRemove = useCallback(\r\n    (id) => {\r\n      setTodos(todos.filter((todo) => todo.id !== id));\r\n      saveLocalStorage();\r\n    },\r\n    [todos]\r\n  );\r\n\r\n  const allRemove = useCallback(() => {\r\n    setTodos([]);\r\n    localStorage.removeItem(USER_LOCALSTORAGE);\r\n  }, []);\r\n\r\n  const selectRemove = useCallback(() => {\r\n    setTodos(todos.filter((todo) => todo.checked));\r\n    saveLocalStorage();\r\n  }, [todos]);\r\n\r\n  const onToggle = useCallback(\r\n    (id) => {\r\n      setTodos(\r\n        todos.map((todo) =>\r\n          todo.id === id ? { ...todo, checked: !todo.checked } : todo\r\n        )\r\n      );\r\n      console.log(todos);\r\n    },\r\n    [todos]\r\n  );\r\n\r\n  return (\r\n    <TodoTemplate>\r\n      <TodoInsert onInsert={onInsert} onToggle={onToggle} todos={todos} />\r\n      <TodoStatus todos={todos} />\r\n      <TodoList\r\n        todos={todos}\r\n        onRemove={onRemove}\r\n        allRemove={allRemove}\r\n        selectRemove={selectRemove}\r\n        onToggle={onToggle}\r\n      />\r\n    </TodoTemplate>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}